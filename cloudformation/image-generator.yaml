AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bedrock Nova Pro Image Generation Service'

Parameters:
  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing Lambda code
    Default: yedamo-lambda-code
  
  LambdaCodeKey:
    Type: String
    Description: S3 key for Lambda code zip file
    Default: image-generator.zip

Resources:
  # IAM Role for Lambda
  ImageGeneratorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'

  # Lambda Function
  ImageGeneratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: yedamo-image-generator
      Runtime: python3.11
      Handler: image_generator.lambda_handler
      Role: !GetAtt ImageGeneratorLambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Timeout: 120
      MemorySize: 1024
      Environment:
        Variables:
          AWS_DEFAULT_REGION: us-east-1

  # API Gateway
  ImageGeneratorApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: yedamo-image-generator-api
      Description: Bedrock Nova Pro Image Generation API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  ImageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ImageGeneratorApi
      ParentId: !GetAtt ImageGeneratorApi.RootResourceId
      PathPart: image

  # API Gateway Method (POST)
  ImagePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ImageGeneratorApi
      ResourceId: !Ref ImageResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ImageGeneratorLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseHeaders:
            Access-Control-Allow-Origin: true
            Access-Control-Allow-Methods: true
            Access-Control-Allow-Headers: true

  # API Gateway Method (OPTIONS for CORS)
  ImageOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ImageGeneratorApi
      ResourceId: !Ref ImageResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ImagePostMethod
      - ImageOptionsMethod
    Properties:
      RestApiId: !Ref ImageGeneratorApi
      StageName: prod

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageGeneratorLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ImageGeneratorApi}/*/POST/image'

  # Lambda Permission for OPTIONS
  LambdaApiGatewayOptionsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageGeneratorLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ImageGeneratorApi}/*/OPTIONS/image'

Outputs:
  ApiUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${ImageGeneratorApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'
  
  ImageEndpoint:
    Description: Image generation endpoint
    Value: !Sub 'https://${ImageGeneratorApi}.execute-api.${AWS::Region}.amazonaws.com/prod/image'
    Export:
      Name: !Sub '${AWS::StackName}-ImageEndpoint'
  
  LambdaFunctionArn:
    Description: Lambda function ARN
    Value: !GetAtt ImageGeneratorLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'
